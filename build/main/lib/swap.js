"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEtherSellParams = exports.createEtherBuyParams = exports.createSellParams = exports.createBuyParams = exports.getSellPrice = exports.getSellPrices = exports.getBuyPrice = exports.getBuyPrices = exports.getDelta = void 0;
const ethers_1 = require("ethers");
const getDelta = (weight, globalNftWeight) => {
    return weight.mul(ethers_1.constants.WeiPerEther).div(globalNftWeight);
};
exports.getDelta = getDelta;
const getBuyPrices = (items, ftReserves, nftReserves) => {
    if (items.length === 0)
        return { total: ethers_1.BigNumber.from(0), prices: {} };
    const weights = items.map((item) => item.weight.add((0, exports.getDelta)(item.weight, nftReserves)));
    const weightSum = weights.reduce((acc, curr) => acc.add(curr), ethers_1.BigNumber.from(0));
    const numerator = ftReserves.mul(weightSum).mul(100);
    const denominator = nftReserves.sub(weightSum).mul(99);
    const total = numerator.div(denominator).add(1);
    const prices = items.reduce((acc, item, index) => (Object.assign(Object.assign({}, acc), { [item.id.toString()]: weights[index].mul(total).div(weightSum) })), {});
    return { total, prices };
};
exports.getBuyPrices = getBuyPrices;
const getBuyPrice = (item, weightSumIncItem, ftReserves, nftReserves) => {
    const itemWeight = item.weight.add((0, exports.getDelta)(item.weight, nftReserves));
    const numerator = ftReserves.mul(weightSumIncItem).mul(100);
    const denominator = nftReserves.sub(weightSumIncItem).mul(99);
    const total = numerator.div(denominator).add(1);
    return itemWeight.mul(total).div(weightSumIncItem);
};
exports.getBuyPrice = getBuyPrice;
const getSellPrices = (items, ftReserves, nftReserves) => {
    if (items.length === 0)
        return { total: ethers_1.BigNumber.from(0), prices: {} };
    const weights = items.map((item) => item.weight.sub((0, exports.getDelta)(item.weight, nftReserves)));
    const weightSum = weights.reduce((acc, curr) => acc.add(curr), ethers_1.BigNumber.from(0));
    const weightSumWithFee = weightSum.mul(99);
    const numerator = weightSumWithFee.mul(ftReserves);
    const denominator = nftReserves.mul(100).add(weightSumWithFee);
    const total = numerator.div(denominator);
    const prices = items.reduce((acc, item, index) => (Object.assign(Object.assign({}, acc), { [item.id.toString()]: weights[index].mul(total).div(weightSum) })), {});
    return { total, prices };
};
exports.getSellPrices = getSellPrices;
const getSellPrice = (item, weightSumIncItem, ftReserves, nftReserves) => {
    const weightSumWithFee = weightSumIncItem.mul(99);
    const numerator = weightSumWithFee.mul(ftReserves);
    const denominator = nftReserves.mul(100).add(weightSumWithFee);
    const total = numerator.div(denominator);
    return item.weight.sub((0, exports.getDelta)(item.weight, nftReserves)).mul(total).div(weightSumIncItem);
};
exports.getSellPrice = getSellPrice;
const createBuyParams = (ftToken, nftToken, to, items, ftReserves, nftReserves) => {
    const ids = items.map(nft => nft.id);
    const { total } = (0, exports.getBuyPrices)(items, ftReserves, nftReserves);
    return [total, ftToken.address, nftToken.address, ids, to];
};
exports.createBuyParams = createBuyParams;
const createSellParams = (nftToken, to, items, ftReserves, nftReserves) => {
    const ids = items.map(nft => nft.id);
    const { total } = (0, exports.getSellPrices)(items, ftReserves, nftReserves);
    return [nftToken.address, ids, total, to];
};
exports.createSellParams = createSellParams;
const createEtherBuyParams = (nftToken, to, items, ftReserves, nftReserves) => {
    const ids = items.map(nft => nft.id);
    const { total } = (0, exports.getBuyPrices)(items, ftReserves, nftReserves);
    return [nftToken.address, ids, to, { value: total }];
};
exports.createEtherBuyParams = createEtherBuyParams;
const createEtherSellParams = (nftToken, to, items, ftReserves, nftReserves) => {
    const ids = items.map(nft => nft.id);
    const { total } = (0, exports.getSellPrices)(items, ftReserves, nftReserves);
    return [nftToken.address, ids, total, to];
};
exports.createEtherSellParams = createEtherSellParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3dhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBOEM7QUFHdkMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFpQixFQUFFLGVBQTBCLEVBQUUsRUFBRTtJQUN4RSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFBO0FBRlksUUFBQSxRQUFRLFlBRXBCO0FBRU0sTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFtQixFQUFFLFVBQXFCLEVBQUUsV0FBc0IsRUFBNkQsRUFBRTtJQUM1SixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBQ3ZFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUEsZ0JBQVEsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxrQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FB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