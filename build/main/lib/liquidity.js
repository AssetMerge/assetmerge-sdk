"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.weightToLiquidityPrice = exports.createAddEtherLiquidityParams = exports.createAddLiquidityParams = void 0;
const ethers_1 = require("ethers");
const createAddLiquidityParams = (ftToken, nftToken, to, ftReserves, globalNftWeight, inputs, customFloor) => {
    const defaultWeight = ethers_1.BigNumber.from(10).pow(18);
    inputs.sort((a, b) => {
        if (a.price.lt(b.price))
            return -1;
        else if (a.price.gt(b.price))
            return 1;
        else
            return 0;
    });
    const ids = inputs.map(nft => nft.item.id);
    const priceSum = inputs.reduce((acc, token) => acc.add(token.price), ethers_1.BigNumber.from(0));
    if (ftReserves.gt(0)) {
        const floorPrice = ftReserves.mul(defaultWeight).div(globalNftWeight);
        const tokenWeights = inputs.map((token) => {
            if (token.price.eq(floorPrice))
                return defaultWeight;
            else
                return token.price.mul(globalNftWeight).div(ftReserves);
        });
        return [ftToken.address, nftToken.address, priceSum, ids, tokenWeights, to];
    }
    else {
        // First Liquidity
        const floorPrice = customFloor !== null && customFloor !== void 0 ? customFloor : inputs[0].price;
        const totalWeight = priceSum.mul(defaultWeight).div(floorPrice);
        const tokenWeights = inputs.map((token) => {
            if (token.price.eq(floorPrice))
                return ethers_1.BigNumber.from(0);
            else {
                const weight = token.price.mul(totalWeight).div(priceSum);
                return weight;
            }
        });
        return [ftToken.address, nftToken.address, priceSum, ids, tokenWeights, to];
    }
};
exports.createAddLiquidityParams = createAddLiquidityParams;
const createAddEtherLiquidityParams = (nftToken, to, ftReserves, globalNftWeight, inputs, customFloor) => {
    const defaultWeight = ethers_1.BigNumber.from(10).pow(18);
    inputs.sort((a, b) => {
        if (a.price.lt(b.price))
            return -1;
        else if (a.price.gt(b.price))
            return 1;
        else
            return 0;
    });
    const ids = inputs.map(nft => nft.item.id);
    const priceSum = inputs.reduce((acc, token) => acc.add(token.price), ethers_1.BigNumber.from(0));
    if (ftReserves.gt(0)) {
        const floorPrice = ftReserves.mul(defaultWeight).div(globalNftWeight);
        const tokenWeights = inputs.map((token) => {
            if (token.price.eq(floorPrice))
                return defaultWeight;
            else
                return token.price.mul(globalNftWeight).div(ftReserves);
        });
        return [nftToken.address, ids, tokenWeights, to, { value: priceSum }];
    }
    else {
        // First Liquidity
        const floorPrice = customFloor !== null && customFloor !== void 0 ? customFloor : inputs[0].price;
        const totalWeight = priceSum.mul(defaultWeight).div(floorPrice);
        const tokenWeights = inputs.map((token) => {
            if (token.price.eq(floorPrice))
                return ethers_1.BigNumber.from(0);
            else {
                const weight = token.price.mul(totalWeight).div(priceSum);
                return weight;
            }
        });
        return [nftToken.address, ids, tokenWeights, to, { value: priceSum }];
    }
};
exports.createAddEtherLiquidityParams = createAddEtherLiquidityParams;
const weightToLiquidityPrice = (weight, ftReserves, globalNftWeight) => {
    if (ftReserves.gt(0) && globalNftWeight.gt(0) && weight.gt(0)) {
        return weight.mul(ftReserves).div(globalNftWeight);
    }
    else
        return ethers_1.BigNumber.from(0);
};
exports.weightToLiquidityPrice = weightToLiquidityPrice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9saXF1aWRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBRzVCLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxPQUFjLEVBQUUsUUFBZ0IsRUFBRSxFQUFVLEVBQUUsVUFBcUIsRUFBRSxlQUEwQixFQUFFLE1BQWdELEVBQUUsV0FBdUIsRUFBaUUsRUFBRTtJQUNwUixNQUFNLGFBQWEsR0FBRyxrQkFBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO2FBQzdCLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFBOztZQUNqQyxPQUFPLENBQUMsQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLGtCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEYsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLE1B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